"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMockApiConnector = getMockApiConnector;
exports.setupDriver = setupDriver;
exports.doesStateHaveResponseData = doesStateHaveResponseData;
exports.getSearchCalls = getSearchCalls;
exports.getAutocompleteCalls = getAutocompleteCalls;
exports.getClickCalls = getClickCalls;
exports.getAutocompleteClickCalls = getAutocompleteClickCalls;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _SearchDriver = _interopRequireDefault(require("../SearchDriver"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var suggestions = {
  documents: [{
    suggestion: "carlsbad"
  }, {
    suggestion: "carlsbad caverns"
  }, {
    suggestion: "carolina"
  }]
};
var searchResponse = {
  totalResults: 1000,
  totalPages: 100,
  requestId: "12345",
  facets: {},
  results: [{}, {}]
};
var autocompleteSearchResponse = {
  requestId: "6789",
  results: [{}, {}]
};

function getMockApiConnector() {
  return {
    onAutocomplete: jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb({
          autocompletedResults: autocompleteSearchResponse.results,
          autocompletedResultsRequestId: autocompleteSearchResponse.requestId,
          autocompletedSuggestions: suggestions
        });
      }
    }),
    onSearch: jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb(searchResponse);
      }
    }),
    onResultClick: jest.fn().mockReturnValue({
      then: function then() {}
    }),
    onAutocompleteResultClick: jest.fn().mockReturnValue({
      then: function then() {}
    })
  };
}

function setupDriver() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      mockSearchResponse = _ref.mockSearchResponse,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["mockSearchResponse"]);

  var mockApiConnector = getMockApiConnector();

  if (mockSearchResponse) {
    mockApiConnector.onSearch = jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb(mockSearchResponse);
      }
    });
  }

  var driver = new _SearchDriver.default(_objectSpread({
    apiConnector: mockApiConnector
  }, rest, {
    // We don't want to deal with async in our tests, so pass 0 so URL state
    // pushes happen synchronously
    urlPushDebounceLength: 0
  }));
  var updatedStateAfterAction = {};
  driver.subscribeToStateChanges(function (newState) {
    updatedStateAfterAction.state = newState;
  });
  jest.runAllTimers();
  return {
    stateAfterCreation: driver.getState(),
    driver: driver,
    updatedStateAfterAction: updatedStateAfterAction,
    mockApiConnector: mockApiConnector
  };
}

function doesStateHaveResponseData(response) {
  var requestId = response.requestId,
      results = response.results,
      totalPages = response.totalPages,
      totalResults = response.totalResults,
      wasSearched = response.wasSearched;
  return !!results && results.length && !!requestId && totalPages > 0 && totalResults > 0 && !!wasSearched;
}

function getSearchCalls(mockApiConnector) {
  return mockApiConnector.onSearch.mock.calls;
}

function getAutocompleteCalls(mockApiConnector) {
  return mockApiConnector.onAutocomplete.mock.calls;
}

function getClickCalls(mockApiConnector) {
  return mockApiConnector.onResultClick.mock.calls;
}

function getAutocompleteClickCalls(mockApiConnector) {
  return mockApiConnector.onAutocompleteResultClick.mock.calls;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,