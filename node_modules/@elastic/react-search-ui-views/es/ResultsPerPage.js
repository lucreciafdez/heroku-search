import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import PropTypes from "prop-types";
import React from "react";
import Select from "react-select";
import { appendClassName } from "./view-helpers";
var setDefaultStyle = {
  option: function option() {
    return {};
  },
  control: function control() {
    return {};
  },
  dropdownIndicator: function dropdownIndicator() {
    return {};
  },
  indicatorSeparator: function indicatorSeparator() {
    return {};
  },
  singleValue: function singleValue(provided) {
    // Pulling out CSS that we don't want
    // eslint-disable-next-line no-unused-vars
    var position = provided.position,
        top = provided.top,
        transform = provided.transform,
        maxWidth = provided.maxWidth,
        rest = _objectWithoutProperties(provided, ["position", "top", "transform", "maxWidth"]);

    return _objectSpread({}, rest, {
      lineHeight: 1,
      marginRight: 0
    });
  },
  valueContainer: function valueContainer(provided) {
    return _objectSpread({}, provided, {
      paddingRight: 0
    });
  }
};

var wrapOption = function wrapOption(option) {
  return {
    label: option,
    value: option
  };
};

function ResultsPerPage(_ref) {
  var className = _ref.className,
      _onChange = _ref.onChange,
      options = _ref.options,
      selectedValue = _ref.value,
      rest = _objectWithoutProperties(_ref, ["className", "onChange", "options", "value"]);

  var selectedOption = null;

  if (selectedValue) {
    selectedOption = wrapOption(selectedValue);
    if (!options.includes(selectedValue)) options = [selectedValue].concat(_toConsumableArray(options));
  }

  return React.createElement("div", _extends({
    className: appendClassName("sui-results-per-page", className)
  }, rest), React.createElement("div", {
    className: "sui-results-per-page__label"
  }, "Show"), React.createElement(Select, {
    className: "sui-select sui-select--inline",
    classNamePrefix: "sui-select",
    value: selectedOption,
    onChange: function onChange(o) {
      return _onChange(o.value);
    },
    options: options.map(wrapOption),
    isSearchable: false,
    styles: setDefaultStyle
  }));
}

ResultsPerPage.propTypes = {
  onChange: PropTypes.func.isRequired,
  options: PropTypes.arrayOf(PropTypes.number).isRequired,
  className: PropTypes.string,
  value: PropTypes.number
};
export default ResultsPerPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9SZXN1bHRzUGVyUGFnZS5qcyJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsIlNlbGVjdCIsImFwcGVuZENsYXNzTmFtZSIsInNldERlZmF1bHRTdHlsZSIsIm9wdGlvbiIsImNvbnRyb2wiLCJkcm9wZG93bkluZGljYXRvciIsImluZGljYXRvclNlcGFyYXRvciIsInNpbmdsZVZhbHVlIiwicHJvdmlkZWQiLCJwb3NpdGlvbiIsInRvcCIsInRyYW5zZm9ybSIsIm1heFdpZHRoIiwicmVzdCIsImxpbmVIZWlnaHQiLCJtYXJnaW5SaWdodCIsInZhbHVlQ29udGFpbmVyIiwicGFkZGluZ1JpZ2h0Iiwid3JhcE9wdGlvbiIsImxhYmVsIiwidmFsdWUiLCJSZXN1bHRzUGVyUGFnZSIsImNsYXNzTmFtZSIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsInNlbGVjdGVkVmFsdWUiLCJzZWxlY3RlZE9wdGlvbiIsImluY2x1ZGVzIiwibyIsIm1hcCIsInByb3BUeXBlcyIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiYXJyYXlPZiIsIm51bWJlciIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBT0EsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGNBQW5CO0FBRUEsU0FBU0MsZUFBVCxRQUFnQyxnQkFBaEM7QUFFQSxJQUFNQyxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLE1BQU0sRUFBRTtBQUFBLFdBQU8sRUFBUDtBQUFBLEdBRGM7QUFFdEJDLEVBQUFBLE9BQU8sRUFBRTtBQUFBLFdBQU8sRUFBUDtBQUFBLEdBRmE7QUFHdEJDLEVBQUFBLGlCQUFpQixFQUFFO0FBQUEsV0FBTyxFQUFQO0FBQUEsR0FIRztBQUl0QkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFBQSxXQUFPLEVBQVA7QUFBQSxHQUpFO0FBS3RCQyxFQUFBQSxXQUFXLEVBQUUscUJBQUFDLFFBQVEsRUFBSTtBQUN2QjtBQUNBO0FBRnVCLFFBR2ZDLFFBSGUsR0FHaUNELFFBSGpDLENBR2ZDLFFBSGU7QUFBQSxRQUdMQyxHQUhLLEdBR2lDRixRQUhqQyxDQUdMRSxHQUhLO0FBQUEsUUFHQUMsU0FIQSxHQUdpQ0gsUUFIakMsQ0FHQUcsU0FIQTtBQUFBLFFBR1dDLFFBSFgsR0FHaUNKLFFBSGpDLENBR1dJLFFBSFg7QUFBQSxRQUd3QkMsSUFIeEIsNEJBR2lDTCxRQUhqQzs7QUFJdkIsNkJBQVlLLElBQVo7QUFBa0JDLE1BQUFBLFVBQVUsRUFBRSxDQUE5QjtBQUFpQ0MsTUFBQUEsV0FBVyxFQUFFO0FBQTlDO0FBQ0QsR0FWcUI7QUFXdEJDLEVBQUFBLGNBQWMsRUFBRSx3QkFBQVIsUUFBUTtBQUFBLDZCQUFVQSxRQUFWO0FBQW9CUyxNQUFBQSxZQUFZLEVBQUU7QUFBbEM7QUFBQTtBQVhGLENBQXhCOztBQWNBLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUFmLE1BQU07QUFBQSxTQUFLO0FBQUVnQixJQUFBQSxLQUFLLEVBQUVoQixNQUFUO0FBQWlCaUIsSUFBQUEsS0FBSyxFQUFFakI7QUFBeEIsR0FBTDtBQUFBLENBQXpCOztBQUVBLFNBQVNrQixjQUFULE9BTUc7QUFBQSxNQUxEQyxTQUtDLFFBTERBLFNBS0M7QUFBQSxNQUpEQyxTQUlDLFFBSkRBLFFBSUM7QUFBQSxNQUhEQyxPQUdDLFFBSERBLE9BR0M7QUFBQSxNQUZNQyxhQUVOLFFBRkRMLEtBRUM7QUFBQSxNQURFUCxJQUNGOztBQUNELE1BQUlhLGNBQWMsR0FBRyxJQUFyQjs7QUFFQSxNQUFJRCxhQUFKLEVBQW1CO0FBQ2pCQyxJQUFBQSxjQUFjLEdBQUdSLFVBQVUsQ0FBQ08sYUFBRCxDQUEzQjtBQUVBLFFBQUksQ0FBQ0QsT0FBTyxDQUFDRyxRQUFSLENBQWlCRixhQUFqQixDQUFMLEVBQXNDRCxPQUFPLElBQUlDLGFBQUosNEJBQXNCRCxPQUF0QixFQUFQO0FBQ3ZDOztBQUVELFNBQ0U7QUFDRSxJQUFBLFNBQVMsRUFBRXZCLGVBQWUsQ0FBQyxzQkFBRCxFQUF5QnFCLFNBQXpCO0FBRDVCLEtBRU1ULElBRk4sR0FJRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsWUFKRixFQUtFLG9CQUFDLE1BQUQ7QUFDRSxJQUFBLFNBQVMsRUFBQywrQkFEWjtBQUVFLElBQUEsZUFBZSxFQUFDLFlBRmxCO0FBR0UsSUFBQSxLQUFLLEVBQUVhLGNBSFQ7QUFJRSxJQUFBLFFBQVEsRUFBRSxrQkFBQUUsQ0FBQztBQUFBLGFBQUlMLFNBQVEsQ0FBQ0ssQ0FBQyxDQUFDUixLQUFILENBQVo7QUFBQSxLQUpiO0FBS0UsSUFBQSxPQUFPLEVBQUVJLE9BQU8sQ0FBQ0ssR0FBUixDQUFZWCxVQUFaLENBTFg7QUFNRSxJQUFBLFlBQVksRUFBRSxLQU5oQjtBQU9FLElBQUEsTUFBTSxFQUFFaEI7QUFQVixJQUxGLENBREY7QUFpQkQ7O0FBRURtQixjQUFjLENBQUNTLFNBQWYsR0FBMkI7QUFDekJQLEVBQUFBLFFBQVEsRUFBRXpCLFNBQVMsQ0FBQ2lDLElBQVYsQ0FBZUMsVUFEQTtBQUV6QlIsRUFBQUEsT0FBTyxFQUFFMUIsU0FBUyxDQUFDbUMsT0FBVixDQUFrQm5DLFNBQVMsQ0FBQ29DLE1BQTVCLEVBQW9DRixVQUZwQjtBQUd6QlYsRUFBQUEsU0FBUyxFQUFFeEIsU0FBUyxDQUFDcUMsTUFISTtBQUl6QmYsRUFBQUEsS0FBSyxFQUFFdEIsU0FBUyxDQUFDb0M7QUFKUSxDQUEzQjtBQU9BLGVBQWViLGNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU2VsZWN0IGZyb20gXCJyZWFjdC1zZWxlY3RcIjtcblxuaW1wb3J0IHsgYXBwZW5kQ2xhc3NOYW1lIH0gZnJvbSBcIi4vdmlldy1oZWxwZXJzXCI7XG5cbmNvbnN0IHNldERlZmF1bHRTdHlsZSA9IHtcbiAgb3B0aW9uOiAoKSA9PiAoe30pLFxuICBjb250cm9sOiAoKSA9PiAoe30pLFxuICBkcm9wZG93bkluZGljYXRvcjogKCkgPT4gKHt9KSxcbiAgaW5kaWNhdG9yU2VwYXJhdG9yOiAoKSA9PiAoe30pLFxuICBzaW5nbGVWYWx1ZTogcHJvdmlkZWQgPT4ge1xuICAgIC8vIFB1bGxpbmcgb3V0IENTUyB0aGF0IHdlIGRvbid0IHdhbnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCB7IHBvc2l0aW9uLCB0b3AsIHRyYW5zZm9ybSwgbWF4V2lkdGgsIC4uLnJlc3QgfSA9IHByb3ZpZGVkO1xuICAgIHJldHVybiB7IC4uLnJlc3QsIGxpbmVIZWlnaHQ6IDEsIG1hcmdpblJpZ2h0OiAwIH07XG4gIH0sXG4gIHZhbHVlQ29udGFpbmVyOiBwcm92aWRlZCA9PiAoeyAuLi5wcm92aWRlZCwgcGFkZGluZ1JpZ2h0OiAwIH0pXG59O1xuXG5jb25zdCB3cmFwT3B0aW9uID0gb3B0aW9uID0+ICh7IGxhYmVsOiBvcHRpb24sIHZhbHVlOiBvcHRpb24gfSk7XG5cbmZ1bmN0aW9uIFJlc3VsdHNQZXJQYWdlKHtcbiAgY2xhc3NOYW1lLFxuICBvbkNoYW5nZSxcbiAgb3B0aW9ucyxcbiAgdmFsdWU6IHNlbGVjdGVkVmFsdWUsXG4gIC4uLnJlc3Rcbn0pIHtcbiAgbGV0IHNlbGVjdGVkT3B0aW9uID0gbnVsbDtcblxuICBpZiAoc2VsZWN0ZWRWYWx1ZSkge1xuICAgIHNlbGVjdGVkT3B0aW9uID0gd3JhcE9wdGlvbihzZWxlY3RlZFZhbHVlKTtcblxuICAgIGlmICghb3B0aW9ucy5pbmNsdWRlcyhzZWxlY3RlZFZhbHVlKSkgb3B0aW9ucyA9IFtzZWxlY3RlZFZhbHVlLCAuLi5vcHRpb25zXTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXthcHBlbmRDbGFzc05hbWUoXCJzdWktcmVzdWx0cy1wZXItcGFnZVwiLCBjbGFzc05hbWUpfVxuICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdWktcmVzdWx0cy1wZXItcGFnZV9fbGFiZWxcIj5TaG93PC9kaXY+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGNsYXNzTmFtZT1cInN1aS1zZWxlY3Qgc3VpLXNlbGVjdC0taW5saW5lXCJcbiAgICAgICAgY2xhc3NOYW1lUHJlZml4PVwic3VpLXNlbGVjdFwiXG4gICAgICAgIHZhbHVlPXtzZWxlY3RlZE9wdGlvbn1cbiAgICAgICAgb25DaGFuZ2U9e28gPT4gb25DaGFuZ2Uoby52YWx1ZSl9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnMubWFwKHdyYXBPcHRpb24pfVxuICAgICAgICBpc1NlYXJjaGFibGU9e2ZhbHNlfVxuICAgICAgICBzdHlsZXM9e3NldERlZmF1bHRTdHlsZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblJlc3VsdHNQZXJQYWdlLnByb3BUeXBlcyA9IHtcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3VsdHNQZXJQYWdlO1xuIl19