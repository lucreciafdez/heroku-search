import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import PropTypes from "prop-types";
import React from "react";
import { Result } from "./types";
import { Suggestion } from "./types";
import { appendClassName } from "./view-helpers";

function getRaw(result, value) {
  if (!result[value] || !result[value].raw) return;
  return result[value].raw;
}

function getSnippet(result, value) {
  if (!result[value] || !result[value].snippet) return;
  return result[value].snippet;
}

function getSuggestionTitle(suggestionType, autocompleteSuggestions) {
  if (autocompleteSuggestions.sectionTitle) {
    return autocompleteSuggestions.sectionTitle;
  }

  if (autocompleteSuggestions[suggestionType] && autocompleteSuggestions[suggestionType].sectionTitle) {
    return autocompleteSuggestions[suggestionType].sectionTitle;
  }
}

function Autocomplete(_ref) {
  var autocompleteResults = _ref.autocompleteResults,
      autocompletedResults = _ref.autocompletedResults,
      autocompleteSuggestions = _ref.autocompleteSuggestions,
      autocompletedSuggestions = _ref.autocompletedSuggestions,
      className = _ref.className,
      getItemProps = _ref.getItemProps,
      getMenuProps = _ref.getMenuProps;
  var index = 0;
  return React.createElement("div", getMenuProps({
    className: appendClassName("sui-search-box__autocomplete-container", className)
  }), React.createElement("div", null, !!autocompleteSuggestions && Object.entries(autocompletedSuggestions).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        suggestionType = _ref3[0],
        suggestions = _ref3[1];

    return React.createElement(React.Fragment, {
      key: suggestionType
    }, getSuggestionTitle(suggestionType, autocompleteSuggestions) && suggestions.length > 0 && React.createElement("div", {
      className: "sui-search-box__section-title"
    }, getSuggestionTitle(suggestionType, autocompleteSuggestions)), suggestions.length > 0 && React.createElement("ul", {
      className: "sui-search-box__suggestion-list"
    }, suggestions.map(function (suggestion) {
      index++;
      return (// eslint-disable-next-line react/jsx-key
        React.createElement("li", getItemProps({
          key: suggestion.suggestion || suggestion.highlight,
          index: index - 1,
          item: suggestion
        }), suggestion.highlight ? React.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: suggestion.highlight
          }
        }) : React.createElement("span", null, suggestion.suggestion))
      );
    })));
  }), !!autocompleteResults && !!autocompletedResults && autocompletedResults.length > 0 && autocompleteResults.sectionTitle && React.createElement("div", {
    className: "sui-search-box__section-title"
  }, autocompleteResults.sectionTitle), !!autocompleteResults && !!autocompletedResults && autocompletedResults.length > 0 && React.createElement("ul", {
    className: "sui-search-box__results-list"
  }, autocompletedResults.map(function (result) {
    index++;
    var titleSnippet = getSnippet(result, autocompleteResults.titleField);
    var titleRaw = getRaw(result, autocompleteResults.titleField);
    return (// eslint-disable-next-line react/jsx-key
      React.createElement("li", getItemProps({
        key: result.id.raw,
        index: index - 1,
        item: result
      }), titleSnippet ? React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: titleSnippet
        }
      }) : React.createElement("span", null, titleRaw))
    );
  }))));
}

Autocomplete.propTypes = {
  allAutocompletedItemsCount: PropTypes.number.isRequired,
  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
    titleField: PropTypes.string.isRequired,
    urlField: PropTypes.string.isRequired,
    linkTarget: PropTypes.string,
    sectionTitle: PropTypes.string
  })]),
  autocompletedResults: PropTypes.arrayOf(Result).isRequired,
  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,
  autocompletedSuggestionsCount: PropTypes.number.isRequired,
  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({
    sectionTitle: PropTypes.string
  }), PropTypes.objectOf(PropTypes.exact({
    sectionTitle: PropTypes.string
  }))]),
  getItemProps: PropTypes.func.isRequired,
  getMenuProps: PropTypes.func.isRequired,
  className: PropTypes.string
};
export default Autocomplete;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,