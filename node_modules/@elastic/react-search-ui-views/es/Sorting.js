import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import PropTypes from "prop-types";
import React from "react";
import Select from "react-select";
import { appendClassName } from "./view-helpers";
var setDefaultStyle = {
  option: function option() {
    return {};
  },
  control: function control() {
    return {};
  },
  dropdownIndicator: function dropdownIndicator() {
    return {};
  },
  indicatorSeparator: function indicatorSeparator() {
    return {};
  }
};

function Sorting(_ref) {
  var className = _ref.className,
      label = _ref.label,
      _onChange = _ref.onChange,
      options = _ref.options,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, ["className", "label", "onChange", "options", "value"]);

  var selectedValue = value;
  var selectedOption = selectedValue ? options.find(function (option) {
    return option.value === selectedValue;
  }) : null;
  return React.createElement("div", _extends({
    className: appendClassName("sui-sorting", className)
  }, rest), label && React.createElement("div", {
    className: "sui-sorting__label"
  }, label), React.createElement(Select, {
    className: "sui-select",
    classNamePrefix: "sui-select",
    value: selectedOption,
    onChange: function onChange(o) {
      return _onChange(o.value);
    },
    options: options,
    isSearchable: false,
    styles: setDefaultStyle
  }));
}

Sorting.propTypes = {
  className: PropTypes.string,
  label: PropTypes.string,
  onChange: PropTypes.func.isRequired,
  options: PropTypes.arrayOf(PropTypes.shape({
    value: PropTypes.string,
    label: PropTypes.string
  })).isRequired,
  value: PropTypes.string
};
export default Sorting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Tb3J0aW5nLmpzIl0sIm5hbWVzIjpbIlByb3BUeXBlcyIsIlJlYWN0IiwiU2VsZWN0IiwiYXBwZW5kQ2xhc3NOYW1lIiwic2V0RGVmYXVsdFN0eWxlIiwib3B0aW9uIiwiY29udHJvbCIsImRyb3Bkb3duSW5kaWNhdG9yIiwiaW5kaWNhdG9yU2VwYXJhdG9yIiwiU29ydGluZyIsImNsYXNzTmFtZSIsImxhYmVsIiwib25DaGFuZ2UiLCJvcHRpb25zIiwidmFsdWUiLCJyZXN0Iiwic2VsZWN0ZWRWYWx1ZSIsInNlbGVjdGVkT3B0aW9uIiwiZmluZCIsIm8iLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwiaXNSZXF1aXJlZCIsImFycmF5T2YiLCJzaGFwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsY0FBbkI7QUFFQSxTQUFTQyxlQUFULFFBQWdDLGdCQUFoQztBQUVBLElBQU1DLGVBQWUsR0FBRztBQUN0QkMsRUFBQUEsTUFBTSxFQUFFO0FBQUEsV0FBTyxFQUFQO0FBQUEsR0FEYztBQUV0QkMsRUFBQUEsT0FBTyxFQUFFO0FBQUEsV0FBTyxFQUFQO0FBQUEsR0FGYTtBQUd0QkMsRUFBQUEsaUJBQWlCLEVBQUU7QUFBQSxXQUFPLEVBQVA7QUFBQSxHQUhHO0FBSXRCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUFBLFdBQU8sRUFBUDtBQUFBO0FBSkUsQ0FBeEI7O0FBT0EsU0FBU0MsT0FBVCxPQUEwRTtBQUFBLE1BQXZEQyxTQUF1RCxRQUF2REEsU0FBdUQ7QUFBQSxNQUE1Q0MsS0FBNEMsUUFBNUNBLEtBQTRDO0FBQUEsTUFBckNDLFNBQXFDLFFBQXJDQSxRQUFxQztBQUFBLE1BQTNCQyxPQUEyQixRQUEzQkEsT0FBMkI7QUFBQSxNQUFsQkMsS0FBa0IsUUFBbEJBLEtBQWtCO0FBQUEsTUFBUkMsSUFBUTs7QUFDeEUsTUFBTUMsYUFBYSxHQUFHRixLQUF0QjtBQUVBLE1BQU1HLGNBQWMsR0FBR0QsYUFBYSxHQUNoQ0gsT0FBTyxDQUFDSyxJQUFSLENBQWEsVUFBQWIsTUFBTTtBQUFBLFdBQUlBLE1BQU0sQ0FBQ1MsS0FBUCxLQUFpQkUsYUFBckI7QUFBQSxHQUFuQixDQURnQyxHQUVoQyxJQUZKO0FBSUEsU0FDRTtBQUFLLElBQUEsU0FBUyxFQUFFYixlQUFlLENBQUMsYUFBRCxFQUFnQk8sU0FBaEI7QUFBL0IsS0FBK0RLLElBQS9ELEdBQ0dKLEtBQUssSUFBSTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FBcUNBLEtBQXJDLENBRFosRUFFRSxvQkFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsWUFEWjtBQUVFLElBQUEsZUFBZSxFQUFDLFlBRmxCO0FBR0UsSUFBQSxLQUFLLEVBQUVNLGNBSFQ7QUFJRSxJQUFBLFFBQVEsRUFBRSxrQkFBQUUsQ0FBQztBQUFBLGFBQUlQLFNBQVEsQ0FBQ08sQ0FBQyxDQUFDTCxLQUFILENBQVo7QUFBQSxLQUpiO0FBS0UsSUFBQSxPQUFPLEVBQUVELE9BTFg7QUFNRSxJQUFBLFlBQVksRUFBRSxLQU5oQjtBQU9FLElBQUEsTUFBTSxFQUFFVDtBQVBWLElBRkYsQ0FERjtBQWNEOztBQUVESyxPQUFPLENBQUNXLFNBQVIsR0FBb0I7QUFDbEJWLEVBQUFBLFNBQVMsRUFBRVYsU0FBUyxDQUFDcUIsTUFESDtBQUVsQlYsRUFBQUEsS0FBSyxFQUFFWCxTQUFTLENBQUNxQixNQUZDO0FBR2xCVCxFQUFBQSxRQUFRLEVBQUVaLFNBQVMsQ0FBQ3NCLElBQVYsQ0FBZUMsVUFIUDtBQUlsQlYsRUFBQUEsT0FBTyxFQUFFYixTQUFTLENBQUN3QixPQUFWLENBQ1B4QixTQUFTLENBQUN5QixLQUFWLENBQWdCO0FBQUVYLElBQUFBLEtBQUssRUFBRWQsU0FBUyxDQUFDcUIsTUFBbkI7QUFBMkJWLElBQUFBLEtBQUssRUFBRVgsU0FBUyxDQUFDcUI7QUFBNUMsR0FBaEIsQ0FETyxFQUVQRSxVQU5nQjtBQU9sQlQsRUFBQUEsS0FBSyxFQUFFZCxTQUFTLENBQUNxQjtBQVBDLENBQXBCO0FBVUEsZUFBZVosT0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTZWxlY3QgZnJvbSBcInJlYWN0LXNlbGVjdFwiO1xuXG5pbXBvcnQgeyBhcHBlbmRDbGFzc05hbWUgfSBmcm9tIFwiLi92aWV3LWhlbHBlcnNcIjtcblxuY29uc3Qgc2V0RGVmYXVsdFN0eWxlID0ge1xuICBvcHRpb246ICgpID0+ICh7fSksXG4gIGNvbnRyb2w6ICgpID0+ICh7fSksXG4gIGRyb3Bkb3duSW5kaWNhdG9yOiAoKSA9PiAoe30pLFxuICBpbmRpY2F0b3JTZXBhcmF0b3I6ICgpID0+ICh7fSlcbn07XG5cbmZ1bmN0aW9uIFNvcnRpbmcoeyBjbGFzc05hbWUsIGxhYmVsLCBvbkNoYW5nZSwgb3B0aW9ucywgdmFsdWUsIC4uLnJlc3QgfSkge1xuICBjb25zdCBzZWxlY3RlZFZhbHVlID0gdmFsdWU7XG5cbiAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBzZWxlY3RlZFZhbHVlXG4gICAgPyBvcHRpb25zLmZpbmQob3B0aW9uID0+IG9wdGlvbi52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSlcbiAgICA6IG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YXBwZW5kQ2xhc3NOYW1lKFwic3VpLXNvcnRpbmdcIiwgY2xhc3NOYW1lKX0gey4uLnJlc3R9PlxuICAgICAge2xhYmVsICYmIDxkaXYgY2xhc3NOYW1lPVwic3VpLXNvcnRpbmdfX2xhYmVsXCI+e2xhYmVsfTwvZGl2Pn1cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgY2xhc3NOYW1lPVwic3VpLXNlbGVjdFwiXG4gICAgICAgIGNsYXNzTmFtZVByZWZpeD1cInN1aS1zZWxlY3RcIlxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb259XG4gICAgICAgIG9uQ2hhbmdlPXtvID0+IG9uQ2hhbmdlKG8udmFsdWUpfVxuICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICBpc1NlYXJjaGFibGU9e2ZhbHNlfVxuICAgICAgICBzdHlsZXM9e3NldERlZmF1bHRTdHlsZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblNvcnRpbmcucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHsgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nIH0pXG4gICkuaXNSZXF1aXJlZCxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRpbmc7XG4iXX0=